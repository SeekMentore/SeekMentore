<?xml version="1.0" encoding="UTF-8"?>
<queryMapper namespace="login">
	<query type="insert" id="insertLoginTracker" paramClass="com.model.LoginTracker">
		INSERT INTO LOGIN_TRACKER
			(LOGIN_SERIAL_ID, USER_ID, USER_TYPE, LOGIN_TIME_MILLIS, LOGIN_FROM, MACHINE_IP) 
		VALUES
			(:loginSerialId, :userId, :userType, :loginTimeMillis, :loginFrom, :machineIp)
	</query>
	<query type="select" id="selectLoginTracker">
		SELECT 
			LT.*,
			CASE
			    WHEN USER_TYPE = 'Employee' THEN IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = LT.USER_ID), LT.USER_ID)
			    WHEN USER_TYPE = 'Tutor' THEN IFNULL((SELECT NAME FROM REGISTERED_TUTOR R WHERE R.USER_ID = LT.USER_ID), LT.USER_ID)
			    WHEN USER_TYPE = 'Customer' THEN IFNULL((SELECT NAME FROM SUBSCRIBED_CUSTOMER S WHERE S.USER_ID = LT.USER_ID), LT.USER_ID)
			    ELSE LT.USER_ID
			END AS USER_NAME
		FROM LOGIN_TRACKER LT
	</query>
	<query type="insert" id="insertPasswordChangeTracker" paramClass="com.model.PasswordChangeTracker">
		INSERT INTO PASSWORD_CHANGE_TRACKER
			(PASSWORD_CHANGE_SERIAL_ID, USER_ID, USER_TYPE, CHANGE_TIME_MILLIS, ENCRYPTED_PASSWORD_OLD, ENCRYPTED_PASSWORD_NEW) 
		VALUES
			(:passwordChangeSerialId, :userId, :userType, :changeTimeMillis, :encryptedPasswordOld, :encryptedPasswordNew)
	</query>
	<query type="select" id="selectPasswordChangeTracker">
		SELECT 
			PCT.*,
			CASE
			    WHEN USER_TYPE = 'Employee' THEN IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = PCT.USER_ID), PCT.USER_ID)
			    WHEN USER_TYPE = 'Tutor' THEN IFNULL((SELECT NAME FROM REGISTERED_TUTOR R WHERE R.USER_ID = PCT.USER_ID), PCT.USER_ID)
			    WHEN USER_TYPE = 'Customer' THEN IFNULL((SELECT NAME FROM SUBSCRIBED_CUSTOMER S WHERE S.USER_ID = PCT.USER_ID), PCT.USER_ID)
			    ELSE PCT.USER_ID
			END AS USER_NAME
		FROM PASSWORD_CHANGE_TRACKER PCT
	</query>
	<query type="insert" id="insertForgotPasswordToken" paramClass="com.model.ForgotPasswordToken">
		INSERT INTO FORGOT_PASSWORD_TOKEN
			(FORGOT_PASSWORD_TOKEN_SERIAL_ID, USER_ID, USER_TYPE, TOKEN, ISSUE_DATE_MILLIS, EXPIRY_DATE_MILLIS, IS_VALID) 
		VALUES
			(:forgotPasswordTokenSerialId, :userId, :userType, :token, :issueDateMillis, :expiryDateMillis, :isValid)
	</query>
	<query type="select" id="selectForgotPasswordToken">
		SELECT 
			FPT.*,
			CASE
			    WHEN USER_TYPE = 'Employee' THEN IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = FPT.USER_ID), FPT.USER_ID)
			    WHEN USER_TYPE = 'Tutor' THEN IFNULL((SELECT NAME FROM REGISTERED_TUTOR R WHERE R.USER_ID = FPT.USER_ID), FPT.USER_ID)
			    WHEN USER_TYPE = 'Customer' THEN IFNULL((SELECT NAME FROM SUBSCRIBED_CUSTOMER S WHERE S.USER_ID = FPT.USER_ID), FPT.USER_ID)
			    ELSE FPT.USER_ID
			END AS USER_NAME
		FROM FORGOT_PASSWORD_TOKEN FPT
	</query>
	<query type="filter" id="forgotPasswordTokenTokenIdFilter">
		WHERE FORGOT_PASSWORD_TOKEN_SERIAL_ID = :forgotPasswordTokenSerialId
	</query>
	<query type="update" id="updateForgotPasswordTokenAsInvalid" paramClass="com.model.ForgotPasswordToken">
		UPDATE FORGOT_PASSWORD_TOKEN SET
		IS_VALID = :isValid
		WHERE FORGOT_PASSWORD_TOKEN_SERIAL_ID = :forgotPasswordTokenSerialId	
	</query>
</queryMapper>