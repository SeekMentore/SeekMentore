<?xml version="1.0" encoding="UTF-8"?>
<queryMapper namespace="public-application">
	<query type="insert" id="insertBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		INSERT INTO BECOME_TUTOR
			(APPLICATION_DATE_MILLIS, APPLICATION_STATUS, FIRST_NAME, LAST_NAME, GENDER, EMAIL_ID, CONTACT_NUMBER, DATE_OF_BIRTH, PRIMARY_PROFESSION, QUALIFICATION, TRANSPORT_MODE, 
			STUDENT_GRADE, SUBJECTS, TEACHING_EXP, LOCATIONS, PREFERRED_TEACHING_TYPE, PREFERRED_TIME_TO_CALL, REFERENCE, ADDRESS_DETAILS, ADDITIONAL_DETAILS, 
			IS_CONTACTED, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES(:applicationDateMillis, :applicationStatus, :firstName, :lastName, :gender, :emailId, :contactNumber, :dateOfBirth, :primaryProfession, :qualification, :transportMode,
			   :studentGrade, :subjects, :teachingExp, :locations, :preferredTeachingType, :preferredTimeToCall, :reference, :addressDetails, :additionalDetails,
			   :isContacted, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="insert" id="insertFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		INSERT INTO FIND_TUTOR
			(ENQUIRY_DATE_MILLIS, ENQUIRY_STATUS, NAME,  EMAIL_ID, CONTACT_NUMBER, STUDENT_GRADE, SUBJECTS, LOCATION, SUBSCRIBED_CUSTOMER, PREFERRED_TIME_TO_CALL, 
			REFERENCE, ADDRESS_DETAILS, ADDITIONAL_DETAILS,	IS_CONTACTED, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES(:enquiryDateMillis, :enquiryStatus, :name, :emailId, :contactNumber, :studentGrade, :subjects, :location, :subscribedCustomer, :preferredTimeToCall, :reference, :addressDetails, :additionalDetails,
			   :isContacted, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="insert" id="insertSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		INSERT INTO SUBSCRIBE_WITH_US
			(APPLICATION_DATE_MILLIS, APPLICATION_STATUS, FIRST_NAME, LAST_NAME, EMAIL_ID, CONTACT_NUMBER, 
			STUDENT_GRADE, SUBJECTS, LOCATION, SUBSCRIBED_CUSTOMER, PREFERRED_TIME_TO_CALL, REFERENCE, ADDRESS_DETAILS, ADDITIONAL_DETAILS, 
			IS_CONTACTED, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES(:applicationDateMillis, :applicationStatus, :firstName, :lastName, :emailId, :contactNumber,
			   :studentGrade, :subjects, :location, :subscribedCustomer, :preferredTimeToCall, :reference, :addressDetails, :additionalDetails,
			   :isContacted, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="insert" id="insertSubmitQuery" paramClass="com.model.components.publicaccess.SubmitQuery">
		INSERT INTO SUBMIT_QUERY
			(QUERY_REQUESTED_DATE_MILLIS, QUERY_STATUS, EMAIL_ID, QUERY_DETAILS, REGISTERED_TUTOR, SUBSCRIBED_CUSTOMER, IS_CONTACTED, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES(:queryRequestedDateMillis, :queryStatus, :emailId, :queryDetails, :registeredTutor, :subscribedCustomer, :isContacted, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="select" id="selectBecomeTutor">
		SELECT
			B.*,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_CONTACTED), B.WHO_CONTACTED) AS WHO_CONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_VERIFIED), B.WHO_VERIFIED) AS WHO_VERIFIED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_SUGGESTED_FOR_RECONTACT), B.WHO_SUGGESTED_FOR_RECONTACT) AS WHO_SUGGESTED_FOR_RECONTACT_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_RECONTACTED), B.WHO_RECONTACTED) AS WHO_RECONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_SELECTED), B.WHO_SELECTED) AS WHO_SELECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_REJECTED), B.WHO_REJECTED) AS WHO_REJECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_BLACKLISTED), B.WHO_BLACKLISTED) AS WHO_BLACKLISTED_NAME,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.WHO_UN_BLACKLISTED), B.WHO_UN_BLACKLISTED) AS WHO_UN_BLACKLISTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = B.UPDATED_BY), B.UPDATED_BY) AS UPDATED_BY_NAME
		FROM BECOME_TUTOR B
	</query>
	<query type="filter" id="becomeTutorApplicationStatusFilter">
		WHERE APPLICATION_STATUS = :applicationStatus
	</query>
	<query type="filter" id="becomeTutorMultiApplicationStatusFilter">
		WHERE APPLICATION_STATUS IN (:applicationStatusList)
	</query>
	<query type="filter" id="becomeTutorMigratedFilter">
		WHERE IS_DATA_MIGRATED = 'Y'
	</query>
	<query type="filter" id="becomeTutorNonMigratedFilter">
		WHERE (IS_DATA_MIGRATED IS NULL OR IS_DATA_MIGRATED &lt;&gt; 'Y')
	</query>
	<query type="filter" id="becomeTutorEmailFilter">
		WHERE EMAIL_ID = :emailId
	</query>
	<query type="filter" id="becomeTutorContactNumberFilter">
		WHERE CONTACT_NUMBER = :contactNumber
	</query>
	<query type="sorter" id="becomeTutorExistingSorter">
		ORDER BY APPLICATION_DATE_MILLIS DESC
	</query>
	<query type="update" id="updateMigratedBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET 
			IS_DATA_MIGRATED = :isDataMigrated, 
			WHEN_MIGRATED_MILLIS = :whenMigratedMillis 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateBlacklistBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			BLACKLISTED_REMARKS = :blacklistedRemarks,
			BLACKLISTED_DATE_MILLIS = :blacklistedDateMillis,
			WHO_BLACKLISTED = :whoBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateUnBlacklistBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			UN_BLACKLISTED_REMARKS = :unblacklistedRemarks,
			UN_BLACKLISTED_DATE_MILLIS = :unblacklistedDateMillis,
			WHO_UN_BLACKLISTED = :whoUnBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateContactedBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted, 
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis, 
			CONTACTED_REMARKS = :contactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateRecontactBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted,
			WHO_SUGGESTED_FOR_RECONTACT = :whoSuggestedForRecontact,
			SUGGESTION_DATE_MILLIS = :suggestionDateMillis,
			SUGGESTION_REMARKS = :suggestionRemarks,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateRecontactedBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted, 
			WHO_RECONTACTED = :whoRecontacted, 
			RECONTACTED_DATE_MILLIS = :recontactedDateMillis, 
			RECONTACTED_REMARKS = :recontactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateRejectBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_REJECTED = :isRejected,
			WHO_REJECTED = :whoRejected, 
			REJECTION_DATE_MILLIS = :rejectionDateMillis, 
			REJECTION_REMARKS = :rejectionRemarks, 
			REJECTION_COUNT = (REJECTION_COUNT + 1), 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateVerifyFailverifyReverifyBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus,  
			IS_AUTHENTICATION_VERIFIED = :isAuthenticationVerified, 
			WHO_VERIFIED = :whoVerified, 
			VERIFICATION_DATE_MILLIS = :verificationDateMillis, 
			VERIFICATION_REMARKS = :verificationRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="update" id="updateSelectedBecomeTutor" paramClass="com.model.components.publicaccess.BecomeTutor">
		UPDATE BECOME_TUTOR SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_SELECTED = :isSelected, 
			WHO_SELECTED = :whoSelected, 
			SELECTION_DATE_MILLIS = :selectionDateMillis, 
			SELECTION_REMARKS = :selectionRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_TUTOR_ID = :tentativeTutorId
	</query>
	<query type="select" id="selectFindTutor">
		SELECT
			F.*,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_CONTACTED), F.WHO_CONTACTED) AS WHO_CONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_VERIFIED), F.WHO_VERIFIED) AS WHO_VERIFIED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_SUGGESTED_FOR_RECONTACT), F.WHO_SUGGESTED_FOR_RECONTACT) AS WHO_SUGGESTED_FOR_RECONTACT_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_RECONTACTED), F.WHO_RECONTACTED) AS WHO_RECONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_SELECTED), F.WHO_SELECTED) AS WHO_SELECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_REJECTED), F.WHO_REJECTED) AS WHO_REJECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_BLACKLISTED), F.WHO_BLACKLISTED) AS WHO_BLACKLISTED_NAME,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.WHO_UN_BLACKLISTED), F.WHO_UN_BLACKLISTED) AS WHO_UN_BLACKLISTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = F.UPDATED_BY), F.UPDATED_BY) AS UPDATED_BY_NAME
		FROM FIND_TUTOR F
	</query>
	<query type="filter" id="findTutorEnquiryStatusFilter">
		WHERE ENQUIRY_STATUS = :enquiryStatus
	</query>
	<query type="filter" id="findTutorMultiEnquiryStatusFilter">
		WHERE ENQUIRY_STATUS IN (:enquiryStatusList)
	</query>
	<query type="filter" id="findTutorNonMigratedFilter">
		WHERE (IS_DATA_MIGRATED IS NULL OR IS_DATA_MIGRATED &lt;&gt; 'Y')
	</query>
	<query type="sorter" id="findTutorExistingSorter">
		ORDER BY ENQUIRY_DATE_MILLIS DESC
	</query>
	<query type="update" id="updateFindTutorDataMigrated" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET 
			IS_DATA_MIGRATED = 'Y', 
			WHEN_MIGRATED_MILLIS = (UNIX_TIMESTAMP(SYSDATE()) * 1000) 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateBlacklistFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			BLACKLISTED_REMARKS = :blacklistedRemarks,
			BLACKLISTED_DATE_MILLIS = :blacklistedDateMillis,
			WHO_BLACKLISTED = :whoBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateUnBlacklistFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			UN_BLACKLISTED_REMARKS = :unblacklistedRemarks,
			UN_BLACKLISTED_DATE_MILLIS = :unblacklistedDateMillis,
			WHO_UN_BLACKLISTED = :whoUnBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateContactedFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_CONTACTED = :isContacted, 
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis, 
			CONTACTED_REMARKS = :contactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateRecontactFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted,
			WHO_SUGGESTED_FOR_RECONTACT = :whoSuggestedForRecontact,
			SUGGESTION_DATE_MILLIS = :suggestionDateMillis,
			SUGGESTION_REMARKS = :suggestionRemarks,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateRecontactedFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted, 
			WHO_RECONTACTED = :whoRecontacted, 
			RECONTACTED_DATE_MILLIS = :recontactedDateMillis, 
			RECONTACTED_REMARKS = :recontactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateRejectFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_REJECTED = :isRejected,
			WHO_REJECTED = :whoRejected, 
			REJECTION_DATE_MILLIS = :rejectionDateMillis, 
			REJECTION_REMARKS = :rejectionRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateVerifyFailverifyReverifyFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_AUTHENTICATION_VERIFIED = :isAuthenticationVerified, 
			WHO_VERIFIED = :whoVerified, 
			VERIFICATION_DATE_MILLIS = :verificationDateMillis, 
			VERIFICATION_REMARKS = :verificationRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="update" id="updateSelectedFindTutor" paramClass="com.model.components.publicaccess.FindTutor">
		UPDATE FIND_TUTOR SET
			ENQUIRY_STATUS = :enquiryStatus, 
			IS_SELECTED = :isSelected, 
			WHO_SELECTED = :whoSelected, 
			SELECTION_DATE_MILLIS = :selectionDateMillis, 
			SELECTION_REMARKS = :selectionRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE ENQUIRY_ID = :enquiryId
	</query>
	<query type="select" id="selectSubscribeWithUs">
		SELECT
			S.*,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_CONTACTED), S.WHO_CONTACTED) AS WHO_CONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_VERIFIED), S.WHO_VERIFIED) AS WHO_VERIFIED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_SUGGESTED_FOR_RECONTACT), S.WHO_SUGGESTED_FOR_RECONTACT) AS WHO_SUGGESTED_FOR_RECONTACT_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_RECONTACTED), S.WHO_RECONTACTED) AS WHO_RECONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_SELECTED), S.WHO_SELECTED) AS WHO_SELECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_REJECTED), S.WHO_REJECTED) AS WHO_REJECTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_BLACKLISTED), S.WHO_BLACKLISTED) AS WHO_BLACKLISTED_NAME,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_UN_BLACKLISTED), S.WHO_UN_BLACKLISTED) AS WHO_UN_BLACKLISTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.UPDATED_BY), S.UPDATED_BY) AS UPDATED_BY_NAME
		FROM SUBSCRIBE_WITH_US S
	</query>
	<query type="filter" id="subscribeWithUsApplicationStatusFilter">
		WHERE APPLICATION_STATUS = :applicationStatus
	</query>
	<query type="filter" id="subscribeWithUsMultiApplicationStatusFilter">
		WHERE APPLICATION_STATUS IN (:applicationStatusList)
	</query>
	<query type="sorter" id="subscribeWithUsExistingSorter">
		ORDER BY APPLICATION_DATE_MILLIS DESC
	</query>
	<query type="update" id="updateBlacklistSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			IS_BLACKLISTED = :isBlacklisted,
			BLACKLISTED_REMARKS = :blacklistedRemarks,
			BLACKLISTED_DATE_MILLIS = :blacklistedDateMillis,
			WHO_BLACKLISTED = :whoBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateUnBlacklistSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			IS_BLACKLISTED = :isBlacklisted,
			UN_BLACKLISTED_REMARKS = :unblacklistedRemarks,
			UN_BLACKLISTED_DATE_MILLIS = :unblacklistedDateMillis,
			WHO_UN_BLACKLISTED = :whoUnBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateContactedSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted, 
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis, 
			CONTACTED_REMARKS = :contactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateRecontactSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted,
			WHO_SUGGESTED_FOR_RECONTACT = :whoSuggestedForRecontact,
			SUGGESTION_DATE_MILLIS = :suggestionDateMillis,
			SUGGESTION_REMARKS = :suggestionRemarks,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateRecontactedSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_TO_BE_RECONTACTED = :isToBeRecontacted, 
			WHO_RECONTACTED = :whoRecontacted, 
			RECONTACTED_DATE_MILLIS = :recontactedDateMillis, 
			RECONTACTED_REMARKS = :recontactedRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateRejectSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_CONTACTED = :isContacted,
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis,
			CONTACTED_REMARKS = :contactedRemarks, 
			IS_REJECTED = :isRejected,
			WHO_REJECTED = :whoRejected, 
			REJECTION_DATE_MILLIS = :rejectionDateMillis, 
			REJECTION_REMARKS = :rejectionRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateVerifyFailverifyReverifySubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_AUTHENTICATION_VERIFIED = :isAuthenticationVerified, 
			WHO_VERIFIED = :whoVerified, 
			VERIFICATION_DATE_MILLIS = :verificationDateMillis, 
			VERIFICATION_REMARKS = :verificationRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="update" id="updateSelectedSubscribeWithUs" paramClass="com.model.components.publicaccess.SubscribeWithUs">
		UPDATE SUBSCRIBE_WITH_US SET
			APPLICATION_STATUS = :applicationStatus, 
			IS_SELECTED = :isSelected, 
			WHO_SELECTED = :whoSelected, 
			SELECTION_DATE_MILLIS = :selectionDateMillis, 
			SELECTION_REMARKS = :selectionRemarks, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy 
		WHERE TENTATIVE_SUBSCRIPTION_ID = :tentativeSubscriptionId
	</query>
	<query type="select" id="selectSubmitQuery">
		SELECT
			Q.*,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = Q.WHO_CONTACTED), Q.WHO_CONTACTED) AS WHO_CONTACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = Q.WHO_NOT_ANSWERED), Q.WHO_NOT_ANSWERED) AS WHO_NOT_ANSWERED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = Q.UPDATED_BY), Q.UPDATED_BY) AS UPDATED_BY_NAME
		FROM SUBMIT_QUERY Q
	</query>
	<query type="filter" id="submitQueryQueryStatusFilter">
		WHERE QUERY_STATUS = :queryStatus
	</query>
	<query type="filter" id="submitQueryRespondedNonEmailSentFilter">
		WHERE (IS_MAIL_SENT IS NULL OR IS_MAIL_SENT &lt;&gt; 'Y')
	</query>
	<query type="sorter" id="submitQueryExistingSorter">
		ORDER BY QUERY_REQUESTED_DATE_MILLIS DESC
	</query>
	<query type="update" id="updateRespondSubmitQuery" paramClass="com.model.components.publicaccess.SubmitQuery">
		UPDATE SUBMIT_QUERY SET
			QUERY_STATUS = :queryStatus, 
			IS_CONTACTED = :isContacted, 
			WHO_CONTACTED = :whoContacted, 
			CONTACTED_DATE_MILLIS = :contactedDateMillis, 
			QUERY_RESPONSE = :queryResponse, 
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy
		 WHERE QUERY_ID = :queryId
	</query>
	<query type="update" id="updateHoldSubmitQuery" paramClass="com.model.components.publicaccess.SubmitQuery">
		UPDATE SUBMIT_QUERY SET
			QUERY_STATUS = :queryStatus, 
			NOT_ANSWERED = :notAnswered, 
			WHO_NOT_ANSWERED = :whoNotAnswered, 
			NOT_ANSWERED_REASON = :notAnsweredReason,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis, 
			UPDATED_BY = :updatedBy
		 WHERE QUERY_ID = :queryId
	</query>
	<query type="update" id="updateRespondSubmitQueryMailSent" paramClass="com.model.components.publicaccess.SubmitQuery">
		UPDATE SUBMIT_QUERY SET
			IS_MAIL_SENT = :isMailSent, 
			MAIL_SENT_MILLIS = :mailSentMillis 
		 WHERE QUERY_ID = :queryId
	</query>
</queryMapper>