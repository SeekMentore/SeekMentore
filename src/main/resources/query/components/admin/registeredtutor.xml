<?xml version="1.0" encoding="UTF-8"?>
<queryMapper namespace="admin-registeredtutor">
	<query type="insert" id="insertRegisteredTutor" paramClass="com.model.components.RegisteredTutor">
		INSERT INTO REGISTERED_TUTOR
			(TUTOR_SERIAL_ID, NAME, BECOME_TUTOR_SERIAL_ID, DATE_OF_BIRTH, GENDER, QUALIFICATION, PRIMARY_PROFESSION, 
			TRANSPORT_MODE, TEACHING_EXP, INTERESTED_STUDENT_GRADES, INTERESTED_SUBJECTS, COMFORTABLE_LOCATIONS, ADDITIONAL_DETAILS, 
			ADDRESS_DETAILS, ENCRYPTED_PASSWORD, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY, USER_ID, PREFERRED_TEACHING_TYPE, USER_TYPE)
		VALUES(:tutorSerialId, :name, :becomeTutorSerialId, :dateOfBirth, :gender, :qualification, :primaryProfession, 
				:transportMode, :teachingExp, :interestedStudentGrades, :interestedSubjects, :comfortableLocations, :additionalDetails, 
				:addressDetails, :encryptedPassword, :recordLastUpdatedMillis, :updatedBy, :userId, :preferredTeachingType, 'Tutor')
	</query>
    <query type="select" id="selectRegisteredTutor">
		SELECT
            R.*,
            RTE.EMAIL_ID AS EMAIL_ID,
			RTC.CONTACT_NUMBER AS CONTACT_NUMBER,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = R.UPDATED_BY), R.UPDATED_BY) AS UPDATED_BY_NAME,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = R.WHO_BLACKLISTED), R.WHO_BLACKLISTED) AS WHO_BLACKLISTED_NAME,
            IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = R.WHO_UN_BLACKLISTED), R.WHO_UN_BLACKLISTED) AS WHO_UN_BLACKLISTED_NAME
        FROM REGISTERED_TUTOR R
        INNER JOIN REGISTERED_TUTOR_EMAIL_ID RTE ON R.TUTOR_SERIAL_ID = RTE.TUTOR_SERIAL_ID AND RTE.IS_PRIMARY = 'Y'
        INNER JOIN REGISTERED_TUTOR_CONTACT_NUMBER RTC ON R.TUTOR_SERIAL_ID = RTC.TUTOR_SERIAL_ID AND RTC.IS_PRIMARY = 'Y'
	</query>
	<query type="filter" id="registeredTutorUserIdFilter">
		WHERE LOWER(R.USER_ID) = LOWER(:userId)
	</query>
	<query type="filter" id="registeredTutorTutorSerialIdFilter">
		WHERE R.TUTOR_SERIAL_ID = :tutorSerialId
	</query>
    <query type="filter" id="registeredTutorEmailFilter">
		WHERE R.TUTOR_SERIAL_ID = (SELECT TUTOR_SERIAL_ID FROM REGISTERED_TUTOR_EMAIL_ID WHERE EMAIL_ID = :emailId)
	</query>
    <query type="filter" id="registeredTutorContactNumberFilter">
		WHERE R.TUTOR_SERIAL_ID = (SELECT TUTOR_SERIAL_ID FROM REGISTERED_TUTOR_CONTACT_NUMBER WHERE CONTACT_NUMBER = :contactNumber)
	</query>
	<query type="filter" id="registeredTutorAlreadyMappedFilter">
		WHERE TUTOR_SERIAL_ID NOT IN (SELECT T.TUTOR_SERIAL_ID FROM TUTOR_MAPPER T WHERE T.ENQUIRY_SERIAL_ID = :enquirySerialId)
	</query>
    <query type="update" id="updateRegisteredTutorBlacklist" paramClass="com.model.components.RegisteredTutor">
		UPDATE REGISTERED_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			BLACKLISTED_REMARKS = :blacklistedRemarks,
			BLACKLISTED_DATE_MILLIS = :blacklistedDateMillis,
			WHO_BLACKLISTED = :whoBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TUTOR_SERIAL_ID = :tutorSerialId
	</query>
	<query type="update" id="updateRegisteredTutorUnBlacklist" paramClass="com.model.components.RegisteredTutor">
		UPDATE REGISTERED_TUTOR SET
			IS_BLACKLISTED = :isBlacklisted,
			UN_BLACKLISTED_REMARKS = :unblacklistedRemarks,
			UN_BLACKLISTED_DATE_MILLIS = :unblacklistedDateMillis,
			WHO_UN_BLACKLISTED = :whoUnBlacklisted,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE TUTOR_SERIAL_ID = :tutorSerialId
	</query>
	<query type="update" id="updateRegisteredTutorPassword" paramClass="com.model.components.RegisteredTutor">
		UPDATE REGISTERED_TUTOR SET 
			ENCRYPTED_PASSWORD = :encryptedPassword 
		WHERE USER_ID = :userId
	</query>
	<query type="insert" id="insertRegisteredTutorEmail" paramClass="com.model.components.RegisteredTutorEmail">
		INSERT INTO REGISTERED_TUTOR_EMAIL_ID
			(REGISTERED_TUTOR_EMAIL_ID_SERIAL_ID, TUTOR_SERIAL_ID, EMAIL_ID, IS_PRIMARY) 
		VALUES
			(:registeredTutorEmailIdSerialId, :tutorSerialId, :emailId, :isPrimary)
	</query>
	<query type="select" id="selectRegisteredTutorEmail">
		SELECT
            RTE.*
        FROM REGISTERED_TUTOR_EMAIL_ID RTE
	</query>
	<query type="filter" id="registeredTutorEmailTutorSerialIdFilter">
		WHERE RTE.TUTOR_SERIAL_ID = :tutorSerialId
	</query>
	<query type="insert" id="insertRegisteredTutorContactNumber" paramClass="com.model.components.RegisteredTutorContactNumber">
		INSERT INTO REGISTERED_TUTOR_CONTACT_NUMBER
			(REGISTERED_TUTOR_CONTACT_NUMBER_SERIAL_ID, TUTOR_SERIAL_ID, CONTACT_NUMBER, IS_PRIMARY) 
		VALUES
			(:registeredTutorContactNumberSerialId, :tutorSerialId, :contactNumber, :isPrimary)
	</query>
	<query type="select" id="selectRegisteredTutorContactNumber">
		SELECT
            RTC.*
        FROM REGISTERED_TUTOR_CONTACT_NUMBER RTC
	</query>
	<query type="filter" id="registeredTutorContactNumberTutorSerialIdFilter">
		WHERE RTC.TUTOR_SERIAL_ID = :tutorSerialId
	</query>
	<query type="select" id="selectRegisteredTutorDocumentCountAndExistence">
		SELECT 
			T.TUTOR_SERIAL_ID,
		    (SELECT COUNT(1) FROM TUTOR_DOCUMENT TD WHERE TD.TUTOR_SERIAL_ID = T.TUTOR_SERIAL_ID) AS TOTAL_FILES,
			(SELECT 'Y' FROM TUTOR_DOCUMENT TD WHERE TD.TUTOR_SERIAL_ID = T.TUTOR_SERIAL_ID AND TD.DOCUMENT_TYPE = '01') AS PAN_CARD_FILE_EXIST,
		    (SELECT 'Y' FROM TUTOR_DOCUMENT TD WHERE TD.TUTOR_SERIAL_ID = T.TUTOR_SERIAL_ID AND TD.DOCUMENT_TYPE = '02') AS PHOTOGRAH_FILE_EXIST,
		    (SELECT 'Y' FROM TUTOR_DOCUMENT TD WHERE TD.TUTOR_SERIAL_ID = T.TUTOR_SERIAL_ID AND TD.DOCUMENT_TYPE = '03') AS AADHAR_CARD_FILE_EXIST
		FROM REGISTERED_TUTOR T 
		WHERE T.TUTOR_SERIAL_ID = :tutorSerialId
	</query>
</queryMapper>