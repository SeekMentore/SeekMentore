<?xml version="1.0" encoding="UTF-8"?>
<queryMapper namespace="sales-subscriptionpackage">
	<query type="select" id="selectSubscriptionPackage">
		SELECT
			S.*,
			C.NAME AS CUSTOMER_NAME, 
			SCE.EMAIL_ID AS CUSTOMER_EMAIL,
			SCC.CONTACT_NUMBER AS CUSTOMER_CONTACT_NUMBER,
			T.NAME AS TUTOR_NAME, 
			RTE.EMAIL_ID AS TUTOR_EMAIL,
			RTC.CONTACT_NUMBER AS TUTOR_CONTACT_NUMBER,
			EN.SUBJECT AS ENQUIRY_SUBJECT,  
			EN.GRADE AS ENQUIRY_GRADE, 
			EN.LOCATION_DETAILS AS ENQUIRY_LOCATION, 
			EN.ADDRESS_DETAILS AS ENQUIRY_ADDRESS_DETAILS,
			EN.ADDITIONAL_DETAILS AS ENQUIRY_ADDITIONAL_DETAILS,
			EN.PREFERRED_TEACHING_TYPE AS ENQUIRY_PREFERRED_TEACHING_TYPE, 
			EN.QUOTED_CLIENT_RATE AS ENQUIRY_QUOTED_CLIENT_RATE,
			EN.NEGOTIATED_RATE_WITH_CLIENT AS ENQUIRY_NEGOTIATED_RATE_WITH_CLIENT,
			EN.CLIENT_NEGOTIATION_REMARKS AS ENQUIRY_CLIENT_NEGOTIATION_REMARKS,
			EN.ENQUIRY_EMAIL AS ENQUIRY_EMAIL,
			EN.ENQUIRY_CONTACT_NUMBER AS ENQUIRY_CONTACT_NUMBER,
			TM.QUOTED_TUTOR_RATE AS TUTOR_MAPPER_QUOTED_TUTOR_RATE,
			TM.NEGOTIATED_RATE_WITH_TUTOR AS TUTOR_MAPPER_NEGOTIATED_RATE_WITH_TUTOR,
			TM.TUTOR_NEGOTIATION_REMARKS AS TUTOR_MAPPER_TUTOR_NEGOTIATION_REMARKS,
			D.CLIENT_REMARKS AS DEMO_CLIENT_REMARKS,
			D.TUTOR_REMARKS AS DEMO_TUTOR_REMARKS,
			D.CLIENT_SATISFIED_FROM_TUTOR AS DEMO_CLIENT_SATISFIED_FROM_TUTOR,
			D.TUTOR_SATISFIED_WITH_CLIENT AS DEMO_TUTOR_SATISFIED_WITH_CLIENT,
			D.ADMIN_SATISFIED_FROM_TUTOR AS DEMO_ADMIN_SATISFIED_FROM_TUTOR,
			D.ADMIN_SATISFIED_WITH_CLIENT AS DEMO_ADMIN_SATISFIED_WITH_CLIENT,
			D.NEED_PRICE_NEGOTIATION_WITH_CLIENT AS DEMO_NEED_PRICE_NEGOTIATION_WITH_CLIENT,
			D.CLIENT_NEGOTIATION_REMARKS AS DEMO_CLIENT_NEGOTIATION_REMARKS,
			D.NEED_PRICE_NEGOTIATION_WITH_TUTOR AS DEMO_NEED_PRICE_NEGOTIATION_WITH_TUTOR,
			D.TUTOR_NEGOTIATION_REMARKS AS DEMO_TUTOR_NEGOTIATION_REMARKS,
			D.ADMIN_REMARKS AS DEMO_ADMIN_REMARKS,
			D.NEGOTIATED_OVERRIDE_RATE_WITH_CLIENT AS DEMO_NEGOTIATED_OVERRIDE_RATE_WITH_CLIENT,
			D.NEGOTIATED_OVERRIDE_RATE_WITH_TUTOR AS DEMO_NEGOTIATED_OVERRIDE_RATE_WITH_TUTOR,
			D.ADMIN_FINALIZING_REMARKS AS DEMO_ADMIN_FINALIZING_REMARKS,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.WHO_ACTED), S.WHO_ACTED) AS WHO_ACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = S.UPDATED_BY), S.UPDATED_BY) AS UPDATED_BY_NAME 
		FROM SUBSCRIPTION_PACKAGE S
		INNER JOIN DEMO D ON S.DEMO_ID = D.DEMO_TRACKER_ID
		INNER JOIN TUTOR_MAPPER TM ON S.TUTOR_MAPPER_ID = TM.TUTOR_MAPPER_ID
		INNER JOIN ENQUIRY EN ON S.ENQUIRY_ID = EN.ENQUIRY_ID 
		INNER JOIN REGISTERED_TUTOR T ON S.TUTOR_ID = T.TUTOR_ID
		INNER JOIN REGISTERED_TUTOR_EMAIL_ID RTE ON S.TUTOR_ID = RTE.TUTOR_ID AND RTE.IS_PRIMARY = 'Y'
        INNER JOIN REGISTERED_TUTOR_CONTACT_NUMBER RTC ON S.TUTOR_ID = RTC.TUTOR_ID AND RTC.IS_PRIMARY = 'Y'
		INNER JOIN SUBSCRIBED_CUSTOMER C ON S.CUSTOMER_ID = C.CUSTOMER_ID
		INNER JOIN SUBSCRIBED_CUSTOMER_EMAIL_ID SCE ON S.CUSTOMER_ID = SCE.CUSTOMER_ID AND SCE.IS_PRIMARY = 'Y'
        INNER JOIN SUBSCRIBED_CUSTOMER_CONTACT_NUMBER SCC ON S.CUSTOMER_ID = SCC.CUSTOMER_ID AND SCC.IS_PRIMARY = 'Y'
	</query>
	<query type="filter" id="subscriptionPackageSubscriptionPackageIdFilter">
		WHERE S.SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
	</query>
	<query type="filter" id="subscriptionPackageSubscriptionPackageIdListFilter">
		WHERE S.SUBSCRIPTION_PACKAGE_SERIAL_ID IN (:subscriptionPackageSerialIdList)
	</query>
	<query type="filter" id="subscriptionPackageTutorIdFilter">
		WHERE S.TUTOR_ID = :tutorId
	</query>
	<query type="filter" id="subscriptionPackageCustomerIdFilter">
		WHERE S.CUSTOMER_ID = :customerId
	</query>
	<query type="filter" id="subscriptionPackageCurrentPackageFilter">
		WHERE S.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="subscriptionPackageHistoryPackageFilter">
		WHERE S.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="filter" id="subscriptionPackageCurrentPackageAdditionalFilter">
		AND S.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="subscriptionPackageHistoryPackageAdditionalFilter">
		AND S.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="sorter" id="subscriptionPackageCreatedDateStartDateSorter">
		ORDER BY CREATED_MILLIS ASC, START_DATE_MILLIS ASC
	</query>
	<query type="insert" id="insertSubscriptionPackage" paramClass="com.model.components.SubscriptionPackage">
		INSERT INTO SUBSCRIPTION_PACKAGE
			(SUBSCRIPTION_PACKAGE_SERIAL_ID, CUSTOMER_ID, TUTOR_ID, ENQUIRY_ID, TUTOR_MAPPER_ID, DEMO_ID, CREATED_MILLIS, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES
			(:subscriptionPackageSerialId, :customerId, :tutorId, :enquiryId, :tutorMapperId, :demoId, :createdMillis, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="update" id="activateSubscriptionPackage" paramClass="com.model.components.SubscriptionPackage">
		UPDATE SUBSCRIPTION_PACKAGE SET
			START_DATE_MILLIS = :startDateMillis,
			CONTRACT_SERIAL_ID = :contractSerialId,
			ACTIVATING_REMARKS = :activatingRemarks,
			ACTION_DATE_MILLIS = :actionDateMillis,
			WHO_ACTED = :whoActed,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
	</query>
	<query type="update" id="terminateSubscriptionPackage" paramClass="com.model.components.SubscriptionPackage">
		UPDATE SUBSCRIPTION_PACKAGE SET
			END_DATE_MILLIS = :endDateMillis,
			TERMINATING_REMARKS = :terminatingRemarks,
			ACTION_DATE_MILLIS = :actionDateMillis,
			WHO_ACTED = :whoActed,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
	</query>
	<query type="select" id="selectPackageAssignment">
		SELECT
			P.*,
			C.CUSTOMER_ID AS CUSTOMER_ID,
			C.NAME AS CUSTOMER_NAME, 
			SCE.EMAIL_ID AS CUSTOMER_EMAIL,
			SCC.CONTACT_NUMBER AS CUSTOMER_CONTACT_NUMBER,
			T.TUTOR_ID AS TUTOR_ID,
			T.NAME AS TUTOR_NAME, 
			RTE.EMAIL_ID AS TUTOR_EMAIL,
			RTC.CONTACT_NUMBER AS TUTOR_CONTACT_NUMBER,
			EN.ENQUIRY_ID AS ENQUIRY_ID,
			EN.SUBJECT AS ENQUIRY_SUBJECT,  
			EN.GRADE AS ENQUIRY_GRADE, 
			EN.ENQUIRY_EMAIL AS ENQUIRY_EMAIL,
			EN.ENQUIRY_CONTACT_NUMBER AS ENQUIRY_CONTACT_NUMBER,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = P.WHO_ACTED), P.WHO_ACTED) AS WHO_ACTED_NAME,
			IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = P.UPDATED_BY), P.UPDATED_BY) AS UPDATED_BY_NAME 
		FROM PACKAGE_ASSIGNMENT P
		INNER JOIN SUBSCRIPTION_PACKAGE S ON S.SUBSCRIPTION_PACKAGE_SERIAL_ID = P.SUBSCRIPTION_PACKAGE_SERIAL_ID
		INNER JOIN ENQUIRY EN ON S.ENQUIRY_ID = EN.ENQUIRY_ID 
		INNER JOIN REGISTERED_TUTOR T ON S.TUTOR_ID = T.TUTOR_ID
		INNER JOIN REGISTERED_TUTOR_EMAIL_ID RTE ON S.TUTOR_ID = RTE.TUTOR_ID AND RTE.IS_PRIMARY = 'Y'
        INNER JOIN REGISTERED_TUTOR_CONTACT_NUMBER RTC ON S.TUTOR_ID = RTC.TUTOR_ID AND RTC.IS_PRIMARY = 'Y'
		INNER JOIN SUBSCRIBED_CUSTOMER C ON S.CUSTOMER_ID = C.CUSTOMER_ID
		INNER JOIN SUBSCRIBED_CUSTOMER_EMAIL_ID SCE ON S.CUSTOMER_ID = SCE.CUSTOMER_ID AND SCE.IS_PRIMARY = 'Y'
        INNER JOIN SUBSCRIBED_CUSTOMER_CONTACT_NUMBER SCC ON S.CUSTOMER_ID = SCC.CUSTOMER_ID AND SCC.IS_PRIMARY = 'Y'
	</query>
	<query type="filter" id="packageAssignmentSubscriptionPackageSerialIdFilter">
		WHERE P.SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
	</query>
	<query type="filter" id="packageAssignmentPackageAssignmentSerialIdFilter">
		WHERE P.PACKAGE_ASSIGNMENT_SERIAL_ID = :packageAssignmentSerialId
	</query>
	<query type="filter" id="packageAssignmentPackageAssignmentSerialIdListFilter">
		WHERE P.PACKAGE_ASSIGNMENT_SERIAL_ID IN (:packageAssignmentSerialIdList)
	</query>
	<query type="filter" id="packageAssignmentCurrentAssignmentFilter">
		WHERE P.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="packageAssignmentHistoryAssignmentFilter">
		WHERE P.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="filter" id="packageAssignmentCurrentAssignmentAdditionalFilter">
		AND P.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="packageAssignmentHistoryAssignmentAdditionalFilter">
		AND P.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="filter" id="packageAssignmentNewAssignmentFilter">
		WHERE P.START_DATE_MILLIS IS NULL AND P.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="packageAssignmentStartedAssignmentFilter">
		WHERE P.START_DATE_MILLIS IS NOT NULL AND P.END_DATE_MILLIS IS NULL AND P.COMPLETED_HOURS &lt; P.TOTAL_HOURS
	</query>
	<query type="filter" id="packageAssignmentHoursCompletedAssignmentFilter">
		WHERE P.TOTAL_HOURS = P.COMPLETED_HOURS AND P.END_DATE_MILLIS IS NULL
	</query>
	<query type="filter" id="packageAssignmentReviewedAssignmentFilter">
		WHERE P.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="sorter" id="packageAssignmentCreatedDateStartDateSorter">
		ORDER BY CREATED_MILLIS ASC, START_DATE_MILLIS ASC
	</query>
	<query type="select" id="countPackageAssignmentForSubscriptionPackage">
		SELECT
			COUNT(1) TOTAL_ASSIGNMENTS
		FROM PACKAGE_ASSIGNMENT P
		WHERE P.SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
	</query>
	<query type="select" id="countActivePackageAssignmentForSubscriptionPackage">
		SELECT
			COUNT(1) TOTAL_CURRENT_ASSIGNMENTS
		FROM PACKAGE_ASSIGNMENT P
		WHERE P.SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
		AND P.END_DATE_MILLIS IS NULL
	</query>
	<query type="select" id="countHistoryPackageAssignmentForSubscriptionPackage">
		SELECT
			COUNT(1) TOTAL_HISTORY_ASSIGNMENTS
		FROM PACKAGE_ASSIGNMENT P
		WHERE P.SUBSCRIPTION_PACKAGE_SERIAL_ID = :subscriptionPackageSerialId
		AND P.END_DATE_MILLIS IS NOT NULL
	</query>
	<query type="insert" id="insertPackageAssignment" paramClass="com.model.components.PackageAssignment">
		INSERT INTO PACKAGE_ASSIGNMENT
			(PACKAGE_ASSIGNMENT_SERIAL_ID, SUBSCRIPTION_PACKAGE_SERIAL_ID, COMPLETED_HOURS, COMPLETED_MINUTES, CREATED_MILLIS, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY) 
		VALUES
			(:packageAssignmentSerialId, :subscriptionPackageSerialId, :completedHours, :completedMinutes, :createdMillis, :recordLastUpdatedMillis, :updatedBy)
	</query>
	<query type="update" id="startPackageAssignment" paramClass="com.model.components.PackageAssignment">
		UPDATE PACKAGE_ASSIGNMENT SET
			START_DATE_MILLIS = :startDateMillis,
			ADMIN_REMARKS = :adminRemarks,
			ACTION_DATE_MILLIS = :actionDateMillis,
			WHO_ACTED = :whoActed,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE PACKAGE_ASSIGNMENT_SERIAL_ID = :packageAssignmentSerialId
	</query>
	<query type="update" id="endPackageAssignment" paramClass="com.model.components.PackageAssignment">
		UPDATE PACKAGE_ASSIGNMENT SET
			END_DATE_MILLIS = :endDateMillis,
			ADMIN_REMARKS = :adminRemarks,
			ACTION_DATE_MILLIS = :actionDateMillis,
			WHO_ACTED = :whoActed,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE PACKAGE_ASSIGNMENT_SERIAL_ID = :packageAssignmentSerialId
	</query>
	<query type="update" id="updateHoursTaughtInPackageAssignment" paramClass="com.model.components.PackageAssignment">
		UPDATE PACKAGE_ASSIGNMENT SET
			COMPLETED_HOURS = :completedHours,
			COMPLETED_MINUTES = :completedMinutes,
			RECORD_LAST_UPDATED_MILLIS = :recordLastUpdatedMillis,
			UPDATED_BY = :updatedBy
		WHERE PACKAGE_ASSIGNMENT_SERIAL_ID = :packageAssignmentSerialId
	</query>
	<query type="select" id="selectAssignmentAttendance">
		SELECT
			A.*,
			CASE
			    WHEN UPDATED_BY_USER_TYPE = 'Employee' THEN IFNULL((SELECT NAME FROM EMPLOYEE E WHERE E.USER_ID = A.UPDATED_BY), A.UPDATED_BY)
			    WHEN UPDATED_BY_USER_TYPE = 'Tutor' THEN IFNULL((SELECT NAME FROM REGISTERED_TUTOR R WHERE R.USER_ID = A.UPDATED_BY), A.UPDATED_BY)
			    WHEN UPDATED_BY_USER_TYPE = 'Customer' THEN IFNULL((SELECT NAME FROM SUBSCRIBED_CUSTOMER S WHERE S.USER_ID = A.UPDATED_BY), A.UPDATED_BY)
			    ELSE A.UPDATED_BY
			END AS UPDATED_BY_NAME
		FROM ASSIGNMENT_ATTENDANCE A
	</query>
	<query type="filter" id="assignmentAttendancePackageAssignmentSerialIdFilter">
		WHERE A.PACKAGE_ASSIGNMENT_SERIAL_ID = :packageAssignmentSerialId
	</query>
	<query type="sorter" id="assignmentAttendanceEntryDateSorter">
		ORDER BY ENTRY_DATE_TIME_MILLIS ASC
	</query>
	<query type="insert" id="insertAssignmentAttendance" paramClass="com.model.components.AssignmentAttendance">
		INSERT INTO ASSIGNMENT_ATTENDANCE
			(ASSIGNMENT_ATTENDANCE_SERIAL_ID, PACKAGE_ASSIGNMENT_SERIAL_ID, ENTRY_DATE_TIME_MILLIS, EXIT_DATE_TIME_MILLIS, DURATION_HOURS, 
			DURATION_MINUTES, TOPICS_TAUGHT, CLASSWORK_PROVIDED, HOMEWORK_PROVIDED, TEST_PROVIDED, TUTOR_REMARKS, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY, UPDATED_BY_USER_TYPE) 
		VALUES
			(:assignmentAttendanceSerialId, :packageAssignmentSerialId, :entryDateTimeMillis, :exitDateTimeMillis, :durationHours, :durationMinutes, :topicsTaught, 
			:isClassworkProvided, :isHomeworkProvided, :isTestProvided, :tutorRemarks, :recordLastUpdatedMillis, :updatedBy, :updatedByUserType)
	</query>
	<query type="insert" id="insertAssignmentAttendanceDocument" paramClass="com.model.components.AssignmentAttendanceDocument">
		INSERT INTO ASSIGNMENT_ATTENDANCE_DOCUMENT
			(ASSIGNMENT_ATTENDANCE_DOCUMENT_SERIAL_ID, ASSIGNMENT_ATTENDANCE_SERIAL_ID, DOCUMENT_TYPE, FILENAME, FS_KEY, RECORD_LAST_UPDATED_MILLIS, UPDATED_BY, UPDATED_BY_USER_TYPE) 
		VALUES
			(:assignmentAttendanceDocumentSerialId, :assignmentAttendanceSerialId, :documentType, :filename, :fsKey, :recordLastUpdatedMillis, :updatedBy, :updatedByUserType)
	</query>
</queryMapper>